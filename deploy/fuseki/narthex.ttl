# ===============  hub3 fuseki_production.ttl  =====================
#
# File generated by ansible, any local changes will be overwritten!
#
# serial# to force config file propagation: x1
#
# ==============================================================

# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Basic Fuseki configuation file.
##
## See also config-tdb.ttl for TDB specific examples.
## See also config-examples.ttl for commented examples.

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .

[] rdf:type fuseki:Server ;
# Timeout - server-wide default: milliseconds.
# Format 1: "1000" -- 1 second timeout
# Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout for the rest of query.
# See java doc for ARQ.queryTimeout
# ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "10000" ] ;

# ja:loadClass "your.code.Class" ;

fuseki:services (
<#narthex_service>
) .

## ---------------------------------------------------------------
<#narthex_service>  rdf:type fuseki:Service ;
fuseki:name              	       "narthex" ;       # http://host:port/tdb
fuseki:serviceQuery                "sparql" ;
fuseki:serviceQuery                "query" ;
fuseki:serviceUpdate               "update" ;
fuseki:serviceUpload               "upload" ;
fuseki:serviceReadWriteGraphStore  "data" ;
fuseki:serviceReadGraphStore       "get" ;
fuseki:dataset           		   <narthex> ;
.

<narthex> rdf:type      tdb:DatasetTDB ;
    tdb:location                        "/opt/hub3/narthex/fuseki/run/databases/narthex";
    ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "5000,30000" ] ;
    # Make the default graph be the union of all named graphs.
    tdb:unionDefaultGraph               true;
    .

